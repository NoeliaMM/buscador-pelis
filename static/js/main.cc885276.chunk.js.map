{"version":3,"sources":["logo.svg","components/Title.js","components/SearchForm.js","components/Movie.js","components/MoviesList.js","pages/Home.js","components/ButtonBackToHome.js","pages/Detail.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","children","className","SearchForm","state","inputMovie","_handleChange","e","setState","target","value","_handleSubmit","preventDefault","fetch","then","res","json","results","Search","totalResults","console","log","props","onResults","onSubmit","this","onChange","type","placeholder","Component","Movie","id","poster","title","year","to","alt","src","MoviesList","movies","map","movie","key","imdbID","Year","Poster","Home","usedSearch","_handleResults","length","_renderResults","ButtonBackToHome","Detail","match","movieId","params","_fetchMovie","Actors","Metascore","Plot","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc885276.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport const Title= ({children})=>(\r\n    <h1 className=\"title\">{children}</h1>\r\n)\r\n","import React, {Component} from 'react';\r\n\r\nconst API_KEY ='ad654455'\r\n\r\n\r\nexport class SearchForm extends Component{\r\n    state={\r\n        inputMovie:''\r\n    }\r\n\r\n    _handleChange= (e)=>{\r\n        this.setState({inputMovie: e.target.value})\r\n    }\r\n\r\n    _handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        // alert(this.state.inputMovie)\r\n        const {inputMovie}=this.state\r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&s=${inputMovie}`)\r\n        .then(res=>res.json())\r\n        .then(results=>{\r\n           const {Search = [], totalResults =\"0\"}=results  //se usa propiedad de ES para dar un valor por defecto a los resultados\r\n\r\n        //    const searchResults=Search || []\r\n            console.log({Search, totalResults})\r\n           this.props.onResults(Search);\r\n        })\r\n        \r\n    \r\n    }\r\n\r\n\r\n    render(){\r\n        return (\r\n        <form onSubmit={this._handleSubmit}>\r\n            <div className=\"field has-addons\">\r\n            <div className=\"control\">\r\n                <input \r\n                className=\"input\" \r\n                onChange={this._handleChange}\r\n                type=\"text\" \r\n                placeholder=\"Encuentra tu peli...\" />\r\n            </div>\r\n            <div className=\"control\">\r\n                <button className=\"button is-info\">\r\n                Buscar\r\n                </button>\r\n            </div>\r\n            </div>\r\n        </form>\r\n\r\n\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Proptypes from 'prop-types'\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nexport class Movie extends Component{\r\n    static propTypes={\r\n        id: Proptypes.string,\r\n        title: Proptypes.string,\r\n        year: Proptypes.string,\r\n        poster: Proptypes.string\r\n    }\r\n\r\n    render(){\r\n        const { id, poster, title, year } =this.props\r\n        return (\r\n            // <a href={`?id=${id}`} className = \"card\" >\r\n            <Link to={`/detail/${id}`} className = \"card\" >\r\n                <div className=\"card-image\">\r\n                    <figure className=\"image\">\r\n                        <img \r\n                        alt={title}\r\n                        src={poster} />\r\n                    </figure>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <div className=\"media\">\r\n                        <div className=\"media-content\">\r\n                            <p className=\"title is-4\">{title}</p>\r\n                            <p className=\"subtitle is-6\">{year}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Link>\r\n        )     \r\n        \r\n    }\r\n}","import React, {Component} from 'react';\r\nimport Proptypes from 'prop-types'\r\nimport {Movie} from './Movie';\r\n\r\n\r\nexport class MoviesList extends Component{\r\n    static propTypes={\r\n        movies: Proptypes.array\r\n      \r\n    }\r\n\r\n    render(){\r\n        const{movies}=this.props\r\n        return (\r\n        <div className=\"MoviesList\">\r\n            {\r\n                movies.map(movie=>{\r\n                return(\r\n                    <div key={movie.imdbID} className=\"MoviesList-item\">\r\n                        <Movie \r\n                        id={movie.imdbID}                       \r\n                        title={movie.Title}\r\n                        year={movie.Year}\r\n                        poster={movie.Poster}\r\n                        />\r\n                    </div>\r\n                )\r\n                })\r\n            }\r\n        </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Title} from '../components/Title';\r\nimport {SearchForm} from '../components/SearchForm';\r\nimport { MoviesList } from '../components/MoviesList';\r\n\r\n\r\nexport class Home extends Component{\r\n    state={usedSearch:false, results: []}\r\n\r\n    _handleResults =(results)=>{\r\n    this.setState({results,usedSearch: true})\r\n    }\r\n\r\n    _renderResults(){\r\n    return(\r\n        this.state.results.length === 0\r\n        ? <p>Ohhh, lo sentimos , no hay resultados</p>\r\n        : <MoviesList movies={this.state.results} />\r\n        \r\n    )\r\n    }\r\n\r\n    render(){\r\n         return (\r\n            <div>\r\n                <Title>Buscador de Películas</Title>\r\n                <div className=\"SearchForm-Wrapper\">\r\n                    <SearchForm onResults={this._handleResults}/>\r\n                </div>\r\n                {this.state.usedSearch \r\n                ? this._renderResults()\r\n                : <small>Usa el formulario para buscar una película</small>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const ButtonBackToHome =()=>(\r\n    <Link className='button is-info' to='/'>Volver al inicio</Link>   \r\n)","import React, {Component} from 'react';\r\nimport Proptypes from 'prop-types';\r\nimport {ButtonBackToHome} from '../components/ButtonBackToHome';\r\n\r\nconst API_KEY ='ad654455'\r\n\r\nexport class Detail extends Component{\r\n\r\n    static propTypes={\r\n        match: Proptypes.shape({\r\n            params:Proptypes.object,\r\n            isExact:Proptypes.bool,\r\n            path: Proptypes.string,\r\n            url: Proptypes.string\r\n        })\r\n    }\r\n\r\n    state = {movie: {}}\r\n\r\n    _fetchMovie({id}){ \r\n        fetch(`http://www.omdbapi.com/?apikey=${API_KEY}&i=${id}`)\r\n        .then(res=>res.json())\r\n        .then(movie=>{\r\n        //    const {Search = [], totalResults =\"0\"}=results  //se usa propiedad de ES para dar un valor por defecto a los resultados\r\n        //    const searchResults=Search || []\r\n           this.setState({movie})\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.match)\r\n        const{movieId}= this.props.match.params\r\n        this._fetchMovie({id: movieId})\r\n    }\r\n\r\n    // _goBack(){\r\n    //     window.history.back()\r\n    // }\r\n\r\n    render(){\r\n        const {Title, Poster, Actors, Metascore, Plot}= this.state.movie\r\n\r\n        return (\r\n        <div className=\"Details\">  \r\n        {/* <button onClick={this._goBack}>Volver</button>  */}\r\n        <ButtonBackToHome/>   \r\n            <div className=\"tile is-parent\">\r\n                <article className=\"tile is-child notification is-primary\">\r\n                    <p className=\"title\">{Title}</p>\r\n                    <p className=\"subtitle\">{Actors}</p>\r\n                    <figure className=\"image\">\r\n                    <img \r\n                        alt={Title}\r\n                        src={Poster}/>\r\n                    </figure>                   \r\n                        <span>{Metascore} min.</span>\r\n                        <p>{Plot}</p> \r\n                </article>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nimport {ButtonBackToHome} from '../components/ButtonBackToHome';\r\n\r\nexport const NotFound =()=>(\r\n    <div>\r\n        <h1 className='title'> 404!</h1>\r\n        <h2 className='subtitle'> No existe la pagina</h2>\r\n\r\n        <ButtonBackToHome/>  \r\n    </div>\r\n    \r\n)","import React, {Component} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bulma/css/bulma.css'\n\nimport {Home} from './pages/Home'\nimport {Detail} from './pages/Detail';\nimport {NotFound} from './pages/NotFound';\n\n\n\nclass App extends Component {\n\n  \nrender(){\n\n  // const url= new URL(document.location)\n  // const hasId= url.searchParams.has('id')\n  // const Page= url.searchParams.has('id')\n  // ?  <Detail id={url.searchParams.get('id')} />\n  // : <Home/>\n\n  return (\n    <div className=\"App\">\n    <Switch>\n      <Route exact path='/' component={Home}/>\n      <Route exact path='/detail/:movieId' component={Detail}/>\n      <Route  component={NotFound}/>\n    </Switch>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n \nReactDOM.render(\n  <BrowserRouter>\n    <App/>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}